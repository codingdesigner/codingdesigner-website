{
  "post-title": "Breakpoint 1.0",
  "post-content": "<article class=\"page\">\n  <div class=\"feature-image\">\n    <img src=\"../../../../src/images/posts/Breakpoint-Title-Card.png\" alt=\"Breakpoint Title Card\" />\n  </div>\n  <p>Don’t feel like reading? <a href=\"https://github.com/canarymason/breakpoint\">Go get it&nbsp;now</a></p>\n\n  <hr>\n\n  <p>About a month ago I was working on a responsive site, and trying to do it right. So instead of setting break points to match\n    <a href=\"http://bradfrostweb.com/blog/notes/this-is-the-web/\">device dimensions</a> (for phone, tablet, and desktop) I would set break points when my content and design needed them. Taking this kind of control over your responsive design means two&nbsp;things:\n  </p>\n\n  <ol>\n    <li>You probably have a <span class=\"caps\">LOT</span> more media&nbsp;queries</li>\n    <li>And you lose track of why you used each&nbsp;one.</li>\n  </ol>\n\n  <h2>I needed a system to manage media&nbsp;queries.</h2>\n\n  <p>As anyone who knows me knows, I’m a huge <a\n      href=\"http://thesassway.com/intermediate/responsive-web-design-in-sass-using-media-queries-in-sass-32\">Sass nerd</a>. Like,\n    <a href=\"http://thesassway.com/articles/the-sass-jerk\">huge</a>. So of course I was already trying to manage my breakpoints with my own system of variables and a super-cool mixin. Well that mixin was quickly growing unweildly, so I knew it was time to make something&nbsp;better.\n  </p>\n\n  <h2>I started with a few&nbsp;assumptions</h2>\n\n  <ol>\n    <li>Most queries test the min-width&nbsp;feature.</li>\n    <li>Variables are a good way to manage queries in a growing&nbsp;project.</li>\n    <li>It’s nice to have a short easy syntax, that would still allow for complex queries when&nbsp;needed.</li>\n  </ol>\n\n  <p>So I started with the syntax and worked it out from there. Since I wanted something simple I settled on using a mixin called “breakpoint”. That’s easy to remember. And since I’m making some assumptions on common use cases I decided to pass that mixin an argument that could contain just a simple numerical value. So, the simplest and most common use of breakpoint goes like&nbsp;this:</p>\n\n  <h3>Simple&nbsp;use</h3>\n\n  <div>\n    <div id=\"highlighter_617332\" class=\"syntaxhighlighter  scss\">\n      <div class=\"toolbar\"><span><a href=\"#\" class=\"toolbar_item command_help help\">?</a></span></div>\n      <table border=\"0\" cellpadding=\"0\" cellspacing=\"0\">\n        <tbody>\n        <tr>\n          <td class=\"gutter\">\n            <div class=\"line number1 index0 alt2\">1</div>\n            <div class=\"line number2 index1 alt1\">2</div>\n            <div class=\"line number3 index2 alt2\">3</div>\n            <div class=\"line number4 index3 alt1\">4</div>\n          </td>\n          <td class=\"code\">\n            <div class=\"container\">\n              <div class=\"line number1 index0 alt2\"><code class=\"scss variable\">$breakpoint</code><code\n                  class=\"scss plain\">-medium-</code><code class=\"scss keyword\">width</code><code\n                  class=\"scss plain\">: </code><code class=\"scss value\">500px</code><code class=\"scss plain\">;</code>\n              </div>\n              <div class=\"line number2 index1 alt1\"><code class=\"scss plain\">.foo {</code></div>\n              <div class=\"line number3 index2 alt2\"><code class=\"scss spaces\">&nbsp;&nbsp;</code><code\n                  class=\"scss plain\">@include breakpoint(</code><code class=\"scss variable\">$breakpoint</code><code\n                  class=\"scss plain\">-medium-width) {...}</code></div>\n              <div class=\"line number4 index3 alt1\"><code class=\"scss plain\">}</code></div>\n            </div>\n          </td>\n        </tr>\n        </tbody>\n      </table>\n    </div>\n  </div>\n\n  <p>Which compiles&nbsp;to:</p>\n\n  <div>\n    <div id=\"highlighter_688488\" class=\"syntaxhighlighter  css\">\n      <div class=\"toolbar\"><span><a href=\"#\" class=\"toolbar_item command_help help\">?</a></span></div>\n      <table border=\"0\" cellpadding=\"0\" cellspacing=\"0\">\n        <tbody>\n        <tr>\n          <td class=\"gutter\">\n            <div class=\"line number1 index0 alt2\">1</div>\n          </td>\n          <td class=\"code\">\n            <div class=\"container\">\n              <div class=\"line number1 index0 alt2\"><code class=\"css plain\">@media (</code><code\n                  class=\"css keyword\">min-width</code><code class=\"css plain\">: </code><code\n                  class=\"css value\">500px</code><code class=\"css plain\">) {.foo {...}}</code></div>\n            </div>\n          </td>\n        </tr>\n        </tbody>\n      </table>\n    </div>\n  </div>\n\n  <h3>min/max&nbsp;use</h3>\n\n  <p>I expanded the syntax to accept numerical pairs, signifying a min/max relationship. The default feature is&nbsp;min/max-width.</p>\n\n  <div>\n    <div id=\"highlighter_939142\" class=\"syntaxhighlighter  scss\">\n      <div class=\"toolbar\"><span><a href=\"#\" class=\"toolbar_item command_help help\">?</a></span></div>\n      <table border=\"0\" cellpadding=\"0\" cellspacing=\"0\">\n        <tbody>\n        <tr>\n          <td class=\"gutter\">\n            <div class=\"line number1 index0 alt2\">1</div>\n            <div class=\"line number2 index1 alt1\">2</div>\n            <div class=\"line number3 index2 alt2\">3</div>\n            <div class=\"line number4 index3 alt1\">4</div>\n          </td>\n          <td class=\"code\">\n            <div class=\"container\">\n              <div class=\"line number1 index0 alt2\"><code class=\"scss variable\">$breakpoint</code><code\n                  class=\"scss plain\">-medium-not-wide: </code><code class=\"scss value\">500px</code> <code\n                  class=\"scss value\">700px</code><code class=\"scss plain\">;</code></div>\n              <div class=\"line number2 index1 alt1\"><code class=\"scss plain\">.baz {</code></div>\n              <div class=\"line number3 index2 alt2\"><code class=\"scss spaces\">&nbsp;&nbsp;</code><code\n                  class=\"scss plain\">@include breakpoint(</code><code class=\"scss variable\">$breakpoint</code><code\n                  class=\"scss plain\">-medium-not-wide) {...}</code></div>\n              <div class=\"line number4 index3 alt1\"><code class=\"scss plain\">}</code></div>\n            </div>\n          </td>\n        </tr>\n        </tbody>\n      </table>\n    </div>\n  </div>\n\n  <p>Which compiles&nbsp;to:</p>\n\n  <div>\n    <div id=\"highlighter_271245\" class=\"syntaxhighlighter  css\">\n      <div class=\"toolbar\"><span><a href=\"#\" class=\"toolbar_item command_help help\">?</a></span></div>\n      <table border=\"0\" cellpadding=\"0\" cellspacing=\"0\">\n        <tbody>\n        <tr>\n          <td class=\"gutter\">\n            <div class=\"line number1 index0 alt2\">1</div>\n          </td>\n          <td class=\"code\">\n            <div class=\"container\">\n              <div class=\"line number1 index0 alt2\"><code class=\"css plain\">@media (</code><code\n                  class=\"css keyword\">min-width</code><code class=\"css plain\">: </code><code\n                  class=\"css value\">500px</code><code class=\"css plain\">) and (</code><code\n                  class=\"css keyword\">max-width</code><code class=\"css plain\">: </code><code\n                  class=\"css value\">700px</code><code class=\"css plain\">) {.baz {...}}</code></div>\n            </div>\n          </td>\n        </tr>\n        </tbody>\n      </table>\n    </div>\n  </div>\n\n  <h3>Feature / value&nbsp;pairs</h3>\n\n  <p>I can’t limit this to just one kind of feature test, so if you pass in a feature name and a value it knows what to&nbsp;do.</p>\n\n  <div>\n    <div id=\"highlighter_803750\" class=\"syntaxhighlighter  scss\">\n      <div class=\"toolbar\"><span><a href=\"#\" class=\"toolbar_item command_help help\">?</a></span></div>\n      <table border=\"0\" cellpadding=\"0\" cellspacing=\"0\">\n        <tbody>\n        <tr>\n          <td class=\"gutter\">\n            <div class=\"line number1 index0 alt2\">1</div>\n            <div class=\"line number2 index1 alt1\">2</div>\n            <div class=\"line number3 index2 alt2\">3</div>\n            <div class=\"line number4 index3 alt1\">4</div>\n          </td>\n          <td class=\"code\">\n            <div class=\"container\">\n              <div class=\"line number1 index0 alt2\"><code class=\"scss variable\">$breakpoint</code><code\n                  class=\"scss plain\">-not-too-wide: max-width </code><code class=\"scss value\">700px</code><code\n                  class=\"scss plain\">;</code></div>\n              <div class=\"line number2 index1 alt1\"><code class=\"scss plain\">.wtf {</code></div>\n              <div class=\"line number3 index2 alt2\"><code class=\"scss spaces\">&nbsp;&nbsp;</code><code\n                  class=\"scss plain\">@include breakpoint(</code><code class=\"scss variable\">$breakpoint</code><code\n                  class=\"scss plain\">-not-too-wide) {...}</code></div>\n              <div class=\"line number4 index3 alt1\"><code class=\"scss plain\">}</code></div>\n            </div>\n          </td>\n        </tr>\n        </tbody>\n      </table>\n    </div>\n  </div>\n\n  <p>Which compiles&nbsp;to:</p>\n\n  <div>\n    <div id=\"highlighter_723905\" class=\"syntaxhighlighter  css\">\n      <div class=\"toolbar\"><span><a href=\"#\" class=\"toolbar_item command_help help\">?</a></span></div>\n      <table border=\"0\" cellpadding=\"0\" cellspacing=\"0\">\n        <tbody>\n        <tr>\n          <td class=\"gutter\">\n            <div class=\"line number1 index0 alt2\">1</div>\n          </td>\n          <td class=\"code\">\n            <div class=\"container\">\n              <div class=\"line number1 index0 alt2\"><code class=\"css plain\">@media (</code><code\n                  class=\"css keyword\">max-width</code><code class=\"css plain\">: </code><code\n                  class=\"css value\">700px</code><code class=\"css plain\">) {.wtf {...}}</code></div>\n            </div>\n          </td>\n        </tr>\n        </tbody>\n      </table>\n    </div>\n  </div>\n\n  <h3>Stack ‘em&nbsp;up</h3>\n\n  <p>Since I want to be able to create as complex a query as needed you can stack these up in a comma-separated list. You can even use one-sided tests like&nbsp;monochrome</p>\n\n  <div>\n    <div id=\"highlighter_448374\" class=\"syntaxhighlighter  scss\">\n      <div class=\"toolbar\"><span><a href=\"#\" class=\"toolbar_item command_help help\">?</a></span></div>\n      <table border=\"0\" cellpadding=\"0\" cellspacing=\"0\">\n        <tbody>\n        <tr>\n          <td class=\"gutter\">\n            <div class=\"line number1 index0 alt2\">1</div>\n            <div class=\"line number2 index1 alt1\">2</div>\n            <div class=\"line number3 index2 alt2\">3</div>\n            <div class=\"line number4 index3 alt1\">4</div>\n          </td>\n          <td class=\"code\">\n            <div class=\"container\">\n              <div class=\"line number1 index0 alt2\"><code class=\"scss variable\">$breakpoint</code><code\n                  class=\"scss plain\">-wide-portrait-</code><code class=\"scss color1\">mono</code><code\n                  class=\"scss plain\">: max-width </code><code class=\"scss value\">700px</code><code\n                  class=\"scss plain\">, orientation </code><code class=\"scss value\">portrait</code><code\n                  class=\"scss plain\">, monochrome;</code></div>\n              <div class=\"line number2 index1 alt1\"><code class=\"scss plain\">.zztop {</code></div>\n              <div class=\"line number3 index2 alt2\"><code class=\"scss spaces\">&nbsp;&nbsp;</code><code\n                  class=\"scss plain\">@include breakpoint(</code><code class=\"scss variable\">$breakpoint</code><code\n                  class=\"scss plain\">-wide-portrait-</code><code class=\"scss color1\">mono</code><code\n                  class=\"scss plain\">) {...}</code></div>\n              <div class=\"line number4 index3 alt1\"><code class=\"scss plain\">}</code></div>\n            </div>\n          </td>\n        </tr>\n        </tbody>\n      </table>\n    </div>\n  </div>\n\n  <p>Which compiles&nbsp;to:</p>\n\n  <div>\n    <div id=\"highlighter_248485\" class=\"syntaxhighlighter  css\">\n      <div class=\"toolbar\"><span><a href=\"#\" class=\"toolbar_item command_help help\">?</a></span></div>\n      <table border=\"0\" cellpadding=\"0\" cellspacing=\"0\">\n        <tbody>\n        <tr>\n          <td class=\"gutter\">\n            <div class=\"line number1 index0 alt2\">1</div>\n          </td>\n          <td class=\"code\">\n            <div class=\"container\">\n              <div class=\"line number1 index0 alt2\"><code class=\"css plain\">@media (</code><code\n                  class=\"css keyword\">max-width</code><code class=\"css plain\">: </code><code\n                  class=\"css value\">700px</code><code class=\"css plain\">) and (orientation: </code><code\n                  class=\"css value\">portrait</code><code class=\"css plain\">) and (monochrome) {.zztop {...}}</code>\n              </div>\n            </div>\n          </td>\n        </tr>\n        </tbody>\n      </table>\n    </div>\n  </div>\n\n  <p>I use this a lot. All over the place. Giving my breakpoint variable names that make sense keeps me organized, and the syntax makes me faster.&nbsp;Yay!</p>\n\n  <h2>Collaborate, refine, add&nbsp;features</h2>\n\n  <p>I told my friends about this, and one in particular practically pounced on it. My good buddy <a\n      href=\"https://twitter.com/#!/snugug\">@snugug</a> had been working on <a\n      href=\"https://github.com/Snugug/respond-to\">another solution</a> to managing media queries and decided that Breakpoint would be a good engine for his syntax as well as the default one. And once he gets his claws in something he doesn’t let go. And that’s awesome, because now I can very happily say that Breakpoint is ready for prime&nbsp;time.\n  </p>\n\n  <p>You want configuration options? You got&nbsp;‘em.</p>\n\n  <p>You want to use ems instead of pixels? (<a\n      href=\"http://blog.cloudfour.com/the-ems-have-it-proportional-media-queries-ftw/\">You should.</a>) Now Breakpoint can do the calculation for&nbsp;you.\n  </p>\n\n  <p>You want to use <code>device-pixel-ratio</code>? (<a\n      href=\"http://www.w3.org/blog/CSS/2012/06/14/unprefix-webkit-device-pixel-ratio/\">You shouldn’t.</a>) Breakpoint will convert those to\n    <code>resolution</code> for&nbsp;you.\n  </p>\n\n  <p>Sam added these features as well as a ton of refinements to the code base. Everyone, thank Sam, <span\n      class=\"caps\">OK</span>? He’s pretty&nbsp;rad.\n  </p>\n\n  <h2>Add a break point at the point where it&nbsp;breaks.</h2>\n\n  <p><a href=\"https://github.com/canarymason/breakpoint\">Go get it&nbsp;now!</a></p>\n  <footer class=\"footer-date\">\n    Posted on Wednesday, June 27th, 2012\n  </footer>\n</article>"
}
